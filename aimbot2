local Aimbot2 = {}
local aimbotEnabled = false
local aimbotTarget = nil
local aimbotConnection = nil
local isAiming = false
local originalCameraSubject = nil
local originalCameraType = nil
local cameraOffsetHeight = 5 -- Default height above target
local cameraOffsetDistance = 10 -- Default distance behind target

function Aimbot2.Init()
    return Aimbot2
end

function Aimbot2.GetClosestTarget()
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    local camera = workspace.CurrentCamera
    
    local closestDistanceToMouse = math.huge
    local closestHumanoid = nil
    
    for _, model in pairs(workspace:GetDescendants()) do
        if model:IsA("Model") and 
           model ~= player.Character and 
           model:FindFirstChild("Humanoid") and 
           model:FindFirstChild("HumanoidRootPart") and
           model.Humanoid.Health > 0 then
           
            -- Prioritize head if it exists, otherwise use HumanoidRootPart
            local targetPart = model:FindFirstChild("Head") or model:FindFirstChild("HumanoidRootPart")
            
            -- Get the screen position of the target's head/part
            local screenPoint, onScreen = camera:WorldToScreenPoint(targetPart.Position)
            
            -- Check if the target is in front of the camera and on screen
            if onScreen and screenPoint.Z > 0 then
                -- Calculate distance between mouse and target on screen
                local mouseDistX = (screenPoint.X - mouse.X)
                local mouseDistY = (screenPoint.Y - mouse.Y)
                local mouseDistance = math.sqrt(mouseDistX^2 + mouseDistY^2)
                
                if mouseDistance < closestDistanceToMouse then
                    closestDistanceToMouse = mouseDistance
                    closestHumanoid = model
                end
            end
        end
    end
    
    return closestHumanoid
endlocal Aimbot2 = {}
local aimbotEnabled = false
local aimbotTarget = nil
local aimbotConnection = nil
local isAiming = false
local originalCameraSubject = nil
local originalCameraType = nil
local cameraOffsetHeight = 5 -- Default height above target
local cameraOffsetDistance = 10 -- Default distance behind target
local previousTargets = {} -- Keep track of previously selected targets
local switchingTarget = false -- Flag to prevent rapid tab switching

function Aimbot2.Init()
    return Aimbot2
end

-- Function to find the next valid target (excluding previous targets)
function Aimbot2.SwitchTarget()
    local player = game.Players.LocalPlayer
    local camera = workspace.CurrentCamera
    local potentialTargets = {}
    
    -- Collect all valid targets
    for _, model in pairs(workspace:GetDescendants()) do
        if model:IsA("Model") and 
           model ~= player.Character and 
           model:FindFirstChild("Humanoid") and 
           model:FindFirstChild("HumanoidRootPart") and
           model:FindFirstChild("Head") and
           model.Humanoid.Health > 0 then
            
            -- Check if this target hasn't been previously selected
            local wasTargetedBefore = false
            for _, prevTarget in ipairs(previousTargets) do
                if model == prevTarget then
                    wasTargetedBefore = true
                    break
                end
            end
            
            -- Only add targets that haven't been selected before
            if not wasTargetedBefore then
                table.insert(potentialTargets, model)
            end
        end
    end
    
    -- If no new targets available, clear history and start over
    if #potentialTargets == 0 then
        previousTargets = {}
        -- Current target should still be excluded
        if aimbotTarget then
            table.insert(previousTargets, aimbotTarget)
        end
        return Aimbot2.SwitchTarget()
    end
    
    -- Find closest target by 3D distance
    local closestDist = math.huge
    local closestTarget = nil
    
    for _, target in ipairs(potentialTargets) do
        local dist = (target.HumanoidRootPart.Position - camera.CFrame.Position).Magnitude
        if dist < closestDist then
            closestDist = dist
            closestTarget = target
        end
    end
    
    -- Add current target to previous targets list before switching
    if aimbotTarget then
        table.insert(previousTargets, aimbotTarget)
    end
    
    return closestTarget
end

-- Function to position camera above and behind the target (spectate view)
function Aimbot2.SpectateTarget(target)
    if not target then return end
    
    local camera = game.Workspace.CurrentCamera
    local player = game.Players.LocalPlayer
    
    -- Store original camera settings if not already stored
    if not originalCameraType then
        originalCameraType = camera.CameraType
        originalCameraSubject = camera.CameraSubject
    end
    
    -- Get target's head (or fall back to HumanoidRootPart if no head)
    local targetHead = target:FindFirstChild("Head")
    local targetHRP = target:FindFirstChild("HumanoidRootPart")
    
    if not targetHead and not targetHRP then return end
    
    -- Use head if available, otherwise use HumanoidRootPart
    local targetPart = targetHead or targetHRP
    
    -- Set camera type to scriptable to manually position it
    camera.CameraType = Enum.CameraType.Scriptable
    
    -- Calculate direction the target is facing
    local lookVector
    if targetHRP then
        lookVector = targetHRP.CFrame.LookVector -- Use HRP for direction even if targeting head
    else
        lookVector = targetPart.CFrame.LookVector
    end
    
    -- Calculate position behind and above the target using the configurable values
    local cameraPosition = targetPart.Position - (lookVector * cameraOffsetDistance) + Vector3.new(0, cameraOffsetHeight, 0)
    
    -- Set camera CFrame to look at the target's head from the calculated position
    camera.CFrame = CFrame.new(cameraPosition, targetPart.Position)
end

-- Function to reset camera to normal
function Aimbot2.ResetCamera()
    local camera = game.Workspace.CurrentCamera
    local player = game.Players.LocalPlayer
    
    -- Restore original camera settings
    if originalCameraType then
        camera.CameraType = originalCameraType
    else
        -- Default to classic camera type if original wasn't stored
        camera.CameraType = Enum.CameraType.Custom
    end
    
    if originalCameraSubject then
        camera.CameraSubject = originalCameraSubject
    elseif player and player.Character and player.Character:FindFirstChild("Humanoid") then
        -- Fallback to player's humanoid if original subject is no longer valid
        camera.CameraSubject = player.Character.Humanoid
    end
    
    -- Force reset camera to player's character view
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        -- Ensure the character has a humanoid
        local humanoid = player.Character:FindFirstChild("Humanoid")
        camera.CameraSubject = humanoid
        
        -- Reset to default camera type (just to be sure)
        camera.CameraType = Enum.CameraType.Custom
        
        -- Clear the internal variables 
        originalCameraType = nil
        originalCameraSubject = nil
    end
end

-- Activation function
function Aimbot2.Enable()
    aimbotEnabled = true
    previousTargets = {} -- Reset target history when enabling
    
    if aimbotConnection then
        aimbotConnection:Disconnect()
    end
    
    aimbotConnection = game:GetService("RunService").RenderStepped:Connect(function()
        local UserInputService = game:GetService("UserInputService")
        
        -- Check if E key is pressed
        if UserInputService:IsKeyDown(Enum.KeyCode.E) then
            -- If not already aiming or if target died, get a new target
            if not isAiming or (aimbotTarget and aimbotTarget:FindFirstChild("Humanoid") and aimbotTarget.Humanoid.Health <= 0) then
                aimbotTarget = Aimbot2.GetClosestTarget()
                isAiming = true
            end
            
            -- Check for Tab key press to switch targets
            if UserInputService:IsKeyDown(Enum.KeyCode.Tab) and not switchingTarget then
                switchingTarget = true
                aimbotTarget = Aimbot2.SwitchTarget()
                
                -- Delay to prevent multiple switches from one press
                spawn(function()
                    wait(0.3) -- Short cooldown for tab switching
                    switchingTarget = false
                end)
            end
            
            -- If we have a valid target, spectate it
            if aimbotTarget and aimbotTarget:FindFirstChild("Humanoid") and aimbotTarget.Humanoid.Health > 0 then
                Aimbot2.SpectateTarget(aimbotTarget)
            else
                -- Target is dead, reset
                isAiming = false
                aimbotTarget = nil
                Aimbot2.ResetCamera()
            end
        else
            -- E key released, reset targeting
            if isAiming then
                Aimbot2.ResetCamera()
            end
            isAiming = false
            aimbotTarget = nil
        end
    end)
end

-- Deactivation function
function Aimbot2.Disable()
    aimbotEnabled = false
    
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end
    
    -- Reset camera when disabled
    Aimbot2.ResetCamera()
    
    isAiming = false
    aimbotTarget = nil
end

-- Current status
function Aimbot2.IsEnabled()
    return aimbotEnabled
end

-- Functions to set camera offset values
function Aimbot2.SetCameraHeight(height)
    if type(height) == "number" then
        cameraOffsetHeight = height
    end
end

function Aimbot2.SetCameraDistance(distance)
    if type(distance) == "number" then
        cameraOffsetDistance = distance
    end
end

function Aimbot2.GetCameraHeight()
    return cameraOffsetHeight
end

function Aimbot2.GetCameraDistance()
    return cameraOffsetDistance
end

return Aimbot2.Init()
