-- AutoStore Module
-- For Goon Rails

local AutoStoreModule = {}

-- Configuration
local config = {
    checkInterval = 0.5, -- Time between checks in seconds
    maxDistance = 30, -- Maximum distance to auto-store items (in studs)
    cooldown = 0.2, -- Cooldown between storing individual items (in seconds)
    debugMode = false -- Set to true for debug prints
}

-- State variables
local state = {
    enabled = {
        junk = false,
        valuables = false,
        anything = false,
        tools = false -- For auto-pickup tools
    },
    connection = nil,
    lastStoreTime = 0,
    lastPickupTime = 0
}

-- Helper function to check nil instances
local function getNil(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

-- Function to get the position of an item
local function getItemPosition(item)
    if item:IsA("Model") then
        if item.PrimaryPart then
            return item.PrimaryPart.Position
        else
            for _, part in pairs(item:GetDescendants()) do
                if part:IsA("BasePart") then
                    return part.Position
                end
            end
        end
    elseif item:IsA("BasePart") then
        return item.Position
    end
    
    return nil
end

-- Function to get the distance to an item
local function getDistanceToItem(item)
    local character = game.Players.LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return math.huge
    end
    
    local humanoidRootPart = character.HumanoidRootPart
    local itemPosition = getItemPosition(item)
    
    if not itemPosition then
        return math.huge
    end
    
    return (humanoidRootPart.Position - itemPosition).Magnitude
end

-- Function to check if an item is within range
local function isInRange(item, distance)
    distance = distance or getDistanceToItem(item)
    return distance <= config.maxDistance
end

-- Function to sort items by distance
local function sortItemsByDistance(items)
    -- Create a table of items with their distances
    local itemsWithDistances = {}
    
    for _, item in pairs(items) do
        if item:IsA("Model") then
            local distance = getDistanceToItem(item)
            table.insert(itemsWithDistances, {item = item, distance = distance})
        end
    end
    
    -- Sort by distance (closest first)
    table.sort(itemsWithDistances, function(a, b)
        return a.distance < b.distance
    end)
    
    -- Return the sorted items
    return itemsWithDistances
end

-- Function to get item type from object info
local function getItemType(objectInfo)
    if not objectInfo then return "Unknown" end
    
    -- First check direct children for TextLabels
    for _, child in pairs(objectInfo:GetChildren()) do
        if child:IsA("TextLabel") and child.Text then
            local text = child.Text:lower()
            if text:find("junk") then
                return "Junk"
            elseif text:find("valuable") then
                return "Valuable"
            end
        end
    end
    
    -- Then search all descendants
    for _, label in pairs(objectInfo:GetDescendants()) do
        if label:IsA("TextLabel") and label.Text then
            local text = label.Text:lower()
            if text:find("junk") then
                return "Junk"
            elseif text:find("valuable") then
                return "Valuable"
            elseif text ~= "" then
                return label.Text -- Return any other text as type
            end
        end
    end
    
    return "Unknown"
end

-- Function to store an item
local function storeItem(item)
    -- Check cooldown
    local currentTime = tick()
    if currentTime - state.lastStoreTime < config.cooldown then
        return false
    end
    
    -- Update last store time
    state.lastStoreTime = currentTime
    
    -- Store the item
    local args = {
        [1] = item
    }
    
    local success, errorMsg = pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("StoreItem"):FireServer(unpack(args))
    end)
    
    if config.debugMode then
        if success then
            print("Stored item: " .. item.Name)
        else
            warn("Failed to store item: " .. errorMsg)
        end
    end
    
    return success
end

-- Function to pick up a tool
local function pickupTool(tool)
    -- Check cooldown
    local currentTime = tick()
    if currentTime - state.lastPickupTime < config.cooldown then
        return false
    end
    
    -- Update last pickup time
    state.lastPickupTime = currentTime
    
    -- Pick up the tool
    local args = {
        [1] = tool
    }
    
    local success, errorMsg = pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Tool"):WaitForChild("PickUpTool"):FireServer(unpack(args))
    end)
    
    if config.debugMode then
        if success then
            print("Picked up tool: " .. tool.Name)
        else
            warn("Failed to pick up tool: " .. errorMsg)
        end
    end
    
    return success
end

-- Main checking function
local function checkItems()
    local player = game.Players.LocalPlayer
    if not player or not player.Character then
        return
    end
    
    -- Check RuntimeItems for items
    if workspace:FindFirstChild("RuntimeItems") then
        -- Get all models in RuntimeItems and sort by distance
        local sortedItems = sortItemsByDistance(workspace.RuntimeItems:GetChildren())
        
        -- Process items in order of proximity
        for _, itemData in ipairs(sortedItems) do
            local model = itemData.item
            local distance = itemData.distance
            
            -- Skip if not in range
            if not isInRange(model, distance) then
                continue
            end
            
            -- First check for auto-store conditions
            if model:FindFirstChild("ObjectInfo") then
                local itemType = getItemType(model.ObjectInfo)
                local shouldStore = false
                
                if state.enabled.anything then
                    shouldStore = true
                elseif itemType == "Junk" and state.enabled.junk then
                    shouldStore = true
                elseif itemType == "Valuable" and state.enabled.valuables then
                    shouldStore = true
                end
                
                if shouldStore then
                    storeItem(model)
                    wait(config.cooldown)
                    continue -- Skip to next item after storing
                end
            end
            
            -- Then check for auto-pickup tools if not already stored
            if state.enabled.tools then
                pickupTool(model)
                wait(config.cooldown)
            end
        end
    end
end

-- Function to update auto loops
function AutoStoreModule.UpdateAutoStoreLoop()
    -- If any auto options are enabled, start the loop
    if state.enabled.junk or state.enabled.valuables or state.enabled.anything or state.enabled.tools then
        -- Disconnect any existing connection
        if state.connection then
            state.connection:Disconnect()
            state.connection = nil
        end
        
        -- Create a new connection
        state.connection = game:GetService("RunService").Heartbeat:Connect(function()
            -- Only run the check at the specified interval
            if tick() % config.checkInterval <= game:GetService("RunService").Heartbeat:Wait() then
                checkItems()
            end
        end)
    else
        -- If all options are disabled, disconnect the loop
        if state.connection then
            state.connection:Disconnect()
            state.connection = nil
        end
    end
end

-- Toggle functions for different item types
function AutoStoreModule.ToggleJunk(enable)
    state.enabled.junk = enable
    AutoStoreModule.UpdateAutoStoreLoop()
    return state.enabled.junk
end

function AutoStoreModule.ToggleValuables(enable)
    state.enabled.valuables = enable
    AutoStoreModule.UpdateAutoStoreLoop()
    return state.enabled.valuables
end

function AutoStoreModule.ToggleAnything(enable)
    state.enabled.anything = enable
    AutoStoreModule.UpdateAutoStoreLoop()
    return state.enabled.anything
end

function AutoStoreModule.ToggleTools(enable)
    state.enabled.tools = enable
    AutoStoreModule.UpdateAutoStoreLoop()
    return state.enabled.tools
end

-- Check if options are enabled
function AutoStoreModule.IsJunkEnabled()
    return state.enabled.junk
end

function AutoStoreModule.IsValuablesEnabled()
    return state.enabled.valuables
end

function AutoStoreModule.IsAnythingEnabled()
    return state.enabled.anything
end

function AutoStoreModule.IsToolsEnabled()
    return state.enabled.tools
end

-- Set the max distance for auto-store
function AutoStoreModule.SetMaxDistance(distance)
    if type(distance) == "number" and distance > 0 then
        config.maxDistance = distance
    end
    return config.maxDistance
end

-- Get the current max distance
function AutoStoreModule.GetMaxDistance()
    return config.maxDistance
end

-- Set check interval
function AutoStoreModule.SetCheckInterval(interval)
    if type(interval) == "number" and interval > 0 then
        config.checkInterval = interval
    end
    return config.checkInterval
end

-- Enable/disable debug mode
function AutoStoreModule.SetDebugMode(enable)
    config.debugMode = enable
    return config.debugMode
end

-- Cleanup function to stop all auto-store processes
function AutoStoreModule.Cleanup()
    if state.connection then
        state.connection:Disconnect()
        state.connection = nil
    end
    
    state.enabled.junk = false
    state.enabled.valuables = false
    state.enabled.anything = false
    state.enabled.tools = false
end

-- Initialize the module
function AutoStoreModule.Init()
    -- Initial setup, if needed
    AutoStoreModule.Cleanup()
end

return AutoStoreModule
